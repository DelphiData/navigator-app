name: Pull Smartsheets to data

on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *"

permissions:
  contents: write

jobs:
  pull:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Runs Node 20 by default; github-script exposes a Node environment with fetch.
      - name: Pull from Smartsheet and write JSON
        uses: actions/github-script@v7
        env:
          SMARTSHEET_ACCESS_TOKEN: ${{ secrets.SMARTSHEET_ACCESS_TOKEN }}
          SHEET_ORGS_ID: ${{ secrets.SHEET_ORGS_ID }}
          SHEET_COMMS_ID: ${{ secrets.SHEET_COMMS_ID }}
          SHEET_RULES_ID: ${{ secrets.SHEET_RULES_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}   # optional
          ENABLE_OPENAI: "false"                           # set to "true" to use OpenAI expansion
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const {
              SMARTSHEET_ACCESS_TOKEN,
              SHEET_ORGS_ID,
              SHEET_COMMS_ID,
              SHEET_RULES_ID,
              OPENAI_API_KEY,
              ENABLE_OPENAI
            } = process.env;

            if (!SMARTSHEET_ACCESS_TOKEN) {
              core.setFailed('Missing SMARTSHEET_ACCESS_TOKEN');
              return;
            }
            if (!SHEET_ORGS_ID || !SHEET_COMMS_ID || !SHEET_RULES_ID) {
              core.setFailed('Missing one or more Smartsheet IDs');
              return;
            }

            async function fetchJson(url, headers = {}) {
              const res = await fetch(url, { headers });
              if (!res.ok) {
                const text = await res.text().catch(() => '');
                throw new Error(`${url} -> ${res.status} ${res.statusText}\n${text}`);
              }
              return res.json();
            }

            async function fetchSheet(sheetId) {
              return fetchJson(
                `https://api.smartsheet.com/2.0/sheets/${sheetId}`,
                { Authorization: `Bearer ${SMARTSHEET_ACCESS_TOKEN}`, Accept: 'application/json' }
              );
            }

            function flattenRows(sheet) {
              const col = new Map(sheet.columns.map(c => [c.id, c.title]));
              return (sheet.rows || []).map(row => {
                const out = {};
                for (const c of (row.cells || [])) {
                  const key = col.get(c.columnId);
                  out[key] = (c.displayValue ?? c.value ?? '');
                }
                return out;
              });
            }

            // 1) Navigator Orgs
            const orgsSheet = await fetchSheet(SHEET_ORGS_ID);
            const orgs = flattenRows(orgsSheet).map(r => ({
              OrgName: r.OrgName || '',
              AllowsFax: Boolean(r.Allows || r['Allows Fax'] || r['Allows Faxing']),
              FaxNumber: r.FaxNumber || '',
              SpecialistsAvailable: String(r.SpecialistsAvailable || '')
                .split(/,\s*/)
                .filter(Boolean)
            }));

            // 2) Comms Templates
            const commsSheet = await fetchSheet(SHEET_COMMS_ID);
            const comms = flattenRows(commsSheet).map(r => ({
              TemplateName: r.TemplateName || '',
              Channel: r.Channel || '',
              Recipient: r.Recipient || '',
              Subject: r.Subject || '',
              Body: r.Body || ''
            }));

            // 3) Rules Library (+ Logic column)
            const rulesSheet = await fetchSheet(SHEET_RULES_ID);
            const rules = flattenRows(rulesSheet).map(r => ({
              RuleID: r.RuleID || '',
              Finding: r.Column2 || '',
              Severity: r.Severity || '',
              Condition: r.Condition || '',
              Recommendation: r.Recommendation || '',
              Logic: r.Logic || ''   // <-- NEW: carry the Logic JSON (string) from Smartsheet
            }));

            // -------- Simple organ + specialty helpers (deterministic) --------
            const ORGAN_TABLE = [
              { organ: 'kidney',    keys: ['kidney','renal','ureter','bosniak'] },
              { organ: 'spleen',    keys: ['spleen','splenic'] },
              { organ: 'liver',     keys: ['liver','hepatic','hepat'] },
              { organ: 'adrenal',   keys: ['adrenal','adrenocortical','adenoma'] },
              { organ: 'lung',      keys: ['lung','pulmonary','nodule','emphysema','groundglass'] },
              { organ: 'aorta',     keys: ['aorta','aneurysm','aaa','taa','iliac','popliteal'] },
              { organ: 'gallbladder', keys: ['gallbladder','gb','biliary'] },
              { organ: 'pancreas',  keys: ['pancreas','pancreatic'] }, 
              { organ: 'bowel',     keys: ['bowel','colon','appendix','ileum','colitis'] },
              { organ: 'thyroid',   keys: ['thyroid','ti-rads','tirads'] },
              { organ: 'breast',    keys: ['breast','bi-rads','birads'] },
              { organ: 'brain',     keys: ['intracranial','cerebral'] },
              { organ: 'heart',     keys: ['coronary','cac','valvular','cardiac'] }
            ];
            function organFromText(findStr, condStr) {
              const s = `${findStr} ${condStr}`.toLowerCase();
              for (const row of ORGAN_TABLE) {
                if (row.keys.some(k => s.includes(k))) return row.organ;
              }
              return 'general';
            }
            function specialtyForFinding(findStr, condStr) {
              const s = `${findStr} ${condStr}`.toLowerCase();
              const table = [
                { spec: 'Endocrinology', keys: ['adrenal','pituitary','thyroid','parathyroid'] },
                { spec: 'Pulmonology',   keys: ['lung','pulmonary','nodule','emphysema','bronch','groundglass'] },
                { spec: 'Cardiology',    keys: ['coronary','cac','valvular','calcification','cardiac'] },
                { spec: 'Vascular Surgery', keys: ['aneurysm','aaa','taa','iliac','popliteal','aorta'] },
                { spec: 'Gastroenterology', keys: ['bowel','colon','appendix','gallbladder','biliary','liver','pancreas','gastric'] },
                { spec: 'Urology',       keys: ['kidney','renal','ureter','bladder','prostate'] },
                { spec: 'Neurology',     keys: ['intracranial','cerebral'] }
              ];
              for (const row of table) {
                if (row.keys.some(k => s.includes(k))) return row.spec;
              }
              return 'Primary Care';
            }
            function tokenize(text) {
              return String(text || '').toLowerCase().replace(/[^a-z0-9\s]/g, ' ')
                .split(/\s+/).filter(Boolean);
            }
            function fallbackKeywords(rule) {
              return Array.from(new Set(tokenize(`${rule.Finding} ${rule.Condition}`))).slice(0, 20);
            }

            // -------- Optional OpenAI expansion (keywords + specialty) --------
            async function openaiExpand(rulesArr) {
              if (ENABLE_OPENAI !== 'true' || !OPENAI_API_KEY) return new Map();
              const payload = {
                model: 'gpt-4o-mini',
                response_format: { type: 'json_object' },
                messages: [{
                  role: 'user',
                  content:
                    'Return {"data":[{"RuleID":"...","keywords":["k1","k2"],"specialty":"Name"}]} for the following rules: ' +
                    JSON.stringify(rulesArr.slice(0, 120))
                }]
              };
              const res = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: { Authorization: `Bearer ${OPENAI_API_KEY}`, 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
              });
              const j = await res.json();
              const content = j?.choices?.[0]?.message?.content || '{}';
              let parsed;
              try { parsed = JSON.parse(content); } catch { parsed = {}; }
              const arr = parsed.data || [];
              const map = new Map();
              for (const it of arr) {
                if (it && it.RuleID) map.set(it.RuleID, it);
              }
              return map;
            }

            const ai = await openaiExpand(rules);

            // -------- Build rulesExpanded with Logic and safe defaults --------
            const rulesExpanded = rules.map(r => {
              const fromAI = ai.get(r.RuleID) || {};
              const specialty = fromAI.specialty || specialtyForFinding(r.Finding, r.Condition);
              const keywords = Array.isArray(fromAI.keywords) && fromAI.keywords.length
                ? fromAI.keywords
                : fallbackKeywords(r);
              const organ = organFromText(r.Finding, r.Condition);

              return {
                RuleID: r.RuleID,
                Finding: r.Finding,
                Severity: r.Severity,
                Condition: r.Condition,
                Recommendation: r.Recommendation,
                // enrichment fields expected by your Worker/frontend:
                organ,                          // <-- NEW default organ
                aliases: [],                    // <-- safe default (can be enriched later)
                negatives: [],                  // <-- safe default (can be enriched later)
                specialty,                      // <-- as before (AI or deterministic)
                keywords,                       // <-- as before (AI or fallback)
                Logic: r.Logic || ''            // <-- NEW pass-through of Smartsheet Logic JSON (string)
              };
            });

            // Write files
            fs.mkdirSync(path.join(process.cwd(), 'data'), { recursive: true });
            fs.writeFileSync('data/navigatorOrgs.json', JSON.stringify(orgs, null, 2));
            fs.writeFileSync('data/commsTemplates.json', JSON.stringify(comms, null, 2));
            fs.writeFileSync('data/rulesLibrary.json', JSON.stringify(rules, null, 2));
            fs.writeFileSync('data/rulesExpanded.json', JSON.stringify(rulesExpanded, null, 2));

            core.info(`Wrote orgs(${orgs.length}), comms(${comms.length}), rules(${rules.length}), rulesExpanded(${rulesExpanded.length})`);

      - name: Commit new data
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/*.json || true
          git commit -m "Update Smartsheet data" || echo "No changes"
          git push || true
