name: Pull 3 Smartsheets → data/

on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *"  # every 30 min

permissions:
  contents: write

jobs:
  pull:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure data folder
        run: mkdir -p data scripts

      - name: Write puller script
        run: |
          cat > scripts/pull-smartsheet.mjs <<'EOF'
          import fs from "fs/promises";

          const {
            SMARTSHEET_ACCESS_TOKEN,
            SHEET_ORGS_ID,
            SHEET_COMMS_ID,
            SHEET_RULES_ID,
            OPENAI_API_KEY,
            ENABLE_OPENAI = "true"   // set to "false" if you want to skip keyword expansion
          } = process.env;

          if (!SMARTSHEET_ACCESS_TOKEN)
            throw new Error("Missing SMARTSHEET_ACCESS_TOKEN");
          if (!SHEET_ORGS_ID || !SHEET_COMMS_ID || !SHEET_RULES_ID)
            throw new Error("Missing one or more sheet IDs");

          const fetchJson = async (url, opts={}) => {
            const r = await fetch(url, opts);
            if (!r.ok) {
              const t = await r.text().catch(()=> "");
              throw new Error(`${url} failed ${r.status}: ${t}`);
            }
            return r.json();
          };

          const fetchSheet = (sheetId) =>
            fetchJson(`https://api.smartsheet.com/2.0/sheets/${sheetId}`, {
              headers: {
                Authorization: `Bearer ${SMARTSHEET_ACCESS_TOKEN}`,
                Accept: "application/json",
              },
            });

          const flattenRows = (sheet) => {
            const col = new Map(sheet.columns.map((c) => [c.id, c.title]));
            return sheet.rows.map((row) => {
              const out = {};
              for (const c of row.cells) {
                out[col.get(c.columnId)] = c.displayValue ?? c.value ?? "";
              }
              return out;
            });
          };

          // 1) Navigator Orgs
          const orgsSheet = await fetchSheet(SHEET_ORGS_ID);
          const orgs = flattenRows(orgsSheet).map((r) => ({
            OrgName: r.OrgName,
            AllowsFax: Boolean(r.Allows || r["Allows Fax"] || r["Allows…"] || r["Allows Faxing"]),
            FaxNumber: r.FaxNumber || "",
            SpecialistsAvailable: (r.SpecialistsAvailable || "")
              .toString()
              .split(/,\s*/)
              .filter(Boolean),
          }));

          // 2) Comms Templates
          const commsSheet = await fetchSheet(SHEET_COMMS_ID);
          const comms = flattenRows(commsSheet).map((r) => ({
            TemplateName: r.TemplateName,
            Channel: r.Channel,
            Recipient: r.Recipient, // "PCP" | "Ordering Provider" | "Specialist" | "Patient" | etc.
            Subject: r.Subject || "",
            Body: r.Body || "",
          }));

          // 3) Rules Library
          const rulesSheet = await fetchSheet(SHEET_RULES_ID);
          const rules = flattenRows(rulesSheet).map((r) => ({
            RuleID: r.RuleID,
            Finding: r.Column2,           // e.g., "Adrenal incidentaloma"
            Severity: r.Severity,         // Green | Amber | Red
            Condition: r.Condition,       // text condition (size/criteria)
            Recommendation: r.Recommendation,
          }));

          // ---- OPTIONAL: Expand each rule with keywords via OpenAI (runs in Actions; no key in browser)
          async function expandRulesWithOpenAI(rules) {
            if (!OPENAI_API_KEY) return null;
            const prompt = `
You are helping match free-text radiology snippets to rules.
For EACH rule (Finding, Condition, Recommendation), return:
- keywords: 12-20 lowercase keywords/phrases (no punctuation) that would be present in a snippet that should map to this rule.
- specialty: single best specialist (e.g., Endocrinology, Pulmonology, Cardiology, Vascular Surgery, Gastroenterology, Urology, Neurology, Nephrology, Oncology, Primary Care).

Return strict JSON array with entries:
{"RuleID":"...", "keywords":["..."], "specialty":"..."}

Rules:
${JSON.stringify(rules.slice(0, 120))}  // cap to keep token usage sane
`.trim();

            const res = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${OPENAI_API_KEY}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                model: "gpt-4o-mini",
                temperature: 0.2,
                response_format: { type: "json_object" },
                messages: [{ role: "user", content: prompt }]
              })
            }).then(r => r.json());

            // Expecting { choices: [ { message: { content: '{"data":[..."]}' } } ] }
            const content = res?.choices?.[0]?.message?.content || "{}";
            let obj;
            try { obj = JSON.parse(content); } catch { obj = {}; }
            const arr = obj.data || obj || [];
            // Build map RuleID -> {keywords, specialty}
            const map = new Map();
            for (const it of arr) {
              if (it?.RuleID) {
                map.set(it.RuleID, {
                  keywords: Array.isArray(it.keywords) ? it.keywords : [],
                  specialty: (it.specialty || "").toString()
                });
              }
            }
            return map;
          }

          let expandedMap = null;
          if (ENABLE_OPENAI === "true") {
            try {
              expandedMap = await expandRulesWithOpenAI(rules);
            } catch (e) {
              console.warn("OpenAI expansion skipped:", e.message);
            }
          }

          const fallbackKeywords = (r) =>
            (r.Finding + " " + r.Condition)
              .toLowerCase()
              .replace(/[^a-z0-9\s]/g, " ")
              .split(/\s+/)
              .filter((w) => w.length > 2)
              .slice(0, 20);

          // Build rulesExpanded
          const rulesExpanded = rules.map((r) => {
            const exp = expandedMap?.get(r.RuleID);
            return {
              RuleID: r.RuleID,
              Finding: r.Finding,
              Severity: r.Severity,
              Condition: r.Condition,
              Recommendation: r.Recommendation,
              keywords: exp?.keywords?.length ? exp.keywords : fallbackKeywords(r),
              specialty: exp?.specialty || ""   // may be blank; frontend has a small mapping fallback
            };
          });

          // Write data files used by the browser app
          await fs.writeFile("data/navigatorOrgs.json", JSON.stringify(orgs, null, 2));
          await fs.writeFile("data/commsTemplates.json", JSON.stringify(comms, null, 2));
          await fs.writeFile("data/rulesLibrary.json", JSON.stringify(rules, null, 2));
          await fs.writeFile("data/rulesExpanded.json", JSON.stringify(rulesExpanded, null, 2));

          console.log(
            `Wrote orgs(${orgs.length}), comms(${comms.length}), rules(${rules.length}), rulesExpanded(${rulesExpanded.length})`
          );
          EOF

      - name: Run puller
        env:
          SMARTSHEET_ACCESS_TOKEN: ${{ secrets.SMARTSHEET_ACCESS_TOKEN }}
          SHEET_ORGS_ID: ${{ secrets.SHEET_ORGS_ID }}
          SHEET_COMMS_ID: ${{ secrets.SHEET_COMMS_ID }}
          SHEET_RULES_ID: ${{ secrets.SHEET_RULES_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENABLE_OPENAI: "true"   # set to "false" to skip LLM keyword expansion
        run: node scripts/pull-smartsheet.mjs

      - name: Commit new data
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/*.json
          git commit -m "Update Smartsheet data" || echo "No changes"
          git push
